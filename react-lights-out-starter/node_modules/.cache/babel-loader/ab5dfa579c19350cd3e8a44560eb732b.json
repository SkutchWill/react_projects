{"ast":null,"code":"import _slicedToArray from \"C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\wills\\\\Desktop\\\\react-bootcamp-materials\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  var _super = _createSuper(Board);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_this)); // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        board.push([]);\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          board[i].push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        ;\n      } // TODO: create array-of-arrays of true/false values\n\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x + 1);\n      flipCell(y, x - 1); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine if the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.hasWon ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"winner\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"neon-orange\",\n            children: \"YOU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"neon-blue\",\n            children: \"WIN!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Board-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"neon-orange\",\n              children: \"Lights\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"neon-blue\",\n              children: \"Out\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"Board\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: this.state.board.map(function (el, idx) {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: el.map(function (arr, innerIdx) {\n                    return /*#__PURE__*/_jsxDEV(Cell, {\n                      isLit: arr,\n                      flipCellsAroundMe: function flipCellsAroundMe() {\n                        return _this2.flipCellsAround(\"\".concat(idx, \"-\").concat(innerIdx));\n                      }\n                    }, \"\".concat(idx, \"-\").concat(innerIdx), false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 23\n                    }, _this2);\n                  })\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 19\n                }, _this2);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.16\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/wills/Desktop/react-bootcamp-materials/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","i","nrows","push","j","ncols","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","every","row","cell","setState","el","idx","arr","innerIdx","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.16\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { hasWon: false, board: this.createBoard()};\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      board.push([]);\n      for (let j = 0; j < this.props.ncols; j++) {\n        board[i].push(Math.random() < this.props.chanceLightStartsOn);  \n      };\n    }\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n    flipCell(y, x + 1);\n    flipCell(y, x - 1);\n\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine if the game has been won\n\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n    \n    // make table board\n    \n    // TODO\n    return(\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>          \n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>        \n              <table className='Board'>\n                <tbody>\n                  {this.state.board.map((el, idx) =>\n                  <tr key={idx}>{el.map((arr, innerIdx) =>\n                      <Cell \n                        key={`${idx}-${innerIdx}`} \n                        isLit={arr} \n                        flipCellsAroundMe={() => this.flipCellsAround(`${idx}-${innerIdx}`)}\n                      />)}\n                    </tr> )}\n                </tbody>\n              </table> \n          </div>\n        )}\n        \n      </div>\n        \n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}